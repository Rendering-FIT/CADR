#version 460
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require
#if 0  // debug print; this makes possible to use debugPrintfEXT() in this shader;
       // for more info, see comments around debugPrintEXT() bellow
# extension GL_EXT_debug_printf : require
#endif


layout(local_size_x=1, local_size_y=1, local_size_z=1) in;


layout(buffer_reference, std430, buffer_reference_align=4) restrict readonly buffer PrimitiveSetRef {
	uint count;
	uint first;
};

layout(buffer_reference, std430, buffer_reference_align=8) restrict readonly buffer DrawableGpuDataRef {
	uint64_t vertexDataHandle;
	uint64_t indexDataHandle;
	uint64_t primitiveSetHandle;
	uint64_t shaderDataHandle;
	uint primitiveSetOffset;
	uint numInstances;
};
const uint DrawableGpuDataSize = 40;

layout(buffer_reference, std430, buffer_reference_align=16) restrict writeonly buffer IndirectDataRef {
	uint vertexCount;
	uint instanceCount;
	uint firstVertex;
	uint baseInstance;
};
const uint IndirectDataSize = 16;

layout(buffer_reference, std430, buffer_reference_align=8) restrict writeonly buffer DrawablePointersRef {
	uint64_t vertexDataPtr;
	uint64_t indexDataPtr;
	uint64_t shaderDataPtr;
};
const uint DrawablePointersSize = 24;

layout(buffer_reference, std430, buffer_reference_align=8) restrict readonly buffer HandleTableRef {
	uint64_t pointers[4096];
};


// push constants
layout(push_constant) uniform pushConstants {
	HandleTableRef handleTable;
	uint64_t drawableListPtr;  // one buffer for the whole scene
	uint64_t indirectDataPtr;  // one buffer for the whole scene
	uint64_t drawablePointersBufferPtr;  // one buffer for the whole scene
};


uint64_t lookupHandle(uint64_t handle)
{
#if defined HANDLE_LEVEL_1
	return handleTable.pointers[uint(handle)];
#elif defined HANDLE_LEVEL_2
	HandleTableRef table2 = HandleTableRef(handleTable.pointers[uint(handle >> 11)]);
	return table2.pointers[uint(handle) & 0x7ff];
#elif defined HANDLE_LEVEL_3
	HandleTableRef table2 = HandleTableRef(handleTable.pointers[uint(handle >> 22)]);
	HandleTableRef table3 = HandleTableRef(table2.pointers[uint(handle >> 11) & 0x7ff]);
	return table3.pointers[uint(handle) & 0x7ff];
#endif
}


void main()
{
	// read drawable data
	uint workGroupID = gl_WorkGroupID.y * 32768 + gl_WorkGroupID.x;
	DrawableGpuDataRef d = DrawableGpuDataRef(drawableListPtr + (workGroupID * DrawableGpuDataSize));
	PrimitiveSetRef ps = PrimitiveSetRef(lookupHandle(d.primitiveSetHandle) + d.primitiveSetOffset);

	// write indirect data
	IndirectDataRef indirectData = IndirectDataRef(indirectDataPtr + (workGroupID * IndirectDataSize));
	indirectData.vertexCount = ps.count;
	indirectData.instanceCount = d.numInstances;
	indirectData.firstVertex = ps.first;
	indirectData.baseInstance = 0;

	// write drawable pointers
	DrawablePointersRef dp = DrawablePointersRef(drawablePointersBufferPtr + (workGroupID * DrawablePointersSize));
	dp.vertexDataPtr = lookupHandle(d.vertexDataHandle);
	dp.indexDataPtr  = lookupHandle(d.indexDataHandle);
	dp.shaderDataPtr = lookupHandle(d.shaderDataHandle);

#if 0  // debug print; to enable it, you also need to (1) enable GL_EXT_debug_printf extension on the beginning of this shader,
       // you need to (2) enable VK_KHR_shader_non_semantic_info device extension (look for VK_KHR_shader_non_semantic_info
       // text in InitAndFinalize.cpp) and you need to (3) have Vulkan Configurator (vkconfig) running and you need to
       // (4) enable "Debug Printf" in Vulkan Configurator in Shader-Based validation;
       //  you might also need to increase "Printf buffer size"
	debugPrintfEXT("Drawable %u, GpuData: 0x%lx, VertexDataPtr: 0x%lx (handle: %u), IndexDataPtr: 0x%lx (handle: %u), PrimitiveSet: 0x%lx (handle: %u, memoryOffset: %u, count %u, first: %u, numInstances: %u), ShaderData: 0x%lx, IndirectData: 0x%lx, DrawablePointers address: 0x%lx.\n",
	               workGroupID, uint64_t(d), lookupHandle(d.vertexDataHandle), uint(d.vertexDataHandle), lookupHandle(d.indexDataHandle), uint(d.indexDataHandle),
	               uint64_t(ps), uint(d.primitiveSetHandle), d.primitiveSetOffset, ps.count, ps.first, d.numInstances,
	               lookupHandle(d.shaderDataHandle), uint64_t(indirectData), uint64_t(dp));
#endif
}
